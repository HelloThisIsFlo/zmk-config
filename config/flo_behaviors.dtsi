behaviors {

    // TODO: REVIEW - THIS DOESN'T WORK. The key in the macro is _not_ tapped immediately 
    // Currently trying to update tap time in macro, let's see if it works
    aksl: aksl {
        compatible = "zmk,behavior-sticky-key";
        label = "adaptive_key_sticky_layer";
        #binding-cells = <1>;
        release-after-ms = <1000>; // Can be 'infinite', it will be triggered by the macro immediately
        bindings = <&mo>;
        // We are NOT using 'quick-release', that way the ak layer won't be deactivated until
        // the &kp releases.
        //
        // PROs of this solution
        // - Fixes bug: We guarantee that there is no time-window during which a key can be pressed before the previous' key ak layer had time to enable
        // - We can tune the 'ak_window' by setting it as the 'tap-ms' in the macros
        // - The &kp is still outputted immediately
    };

    bkp: bkp {
        // This is a macro that simply taps one key
        // The difference with '&kp' is that, because it is a macro, the '&kp' will be buffered and outputted _after_ any currently running macro
        // This eliminates ALL the timing issues with the ak layers and &aksl üòÉüéâ
        // 
        // It will however, slow down the output. So, to not slow down too much, make sure to still use a relatively short 'ak_window'.
        // If we target 120 wpm, we can bump 'ak_window' up to 100ms (wpm = 120, cpm = 120 x 5 = 600, max_ak_window = 60 / (1000 x 600) = 100ms)
        label = "buffered_key_press";
        compatible = "zmk,behavior-macro-one-param";
        #binding-cells = <1>;
        wait-ms = <0>;
        tap-ms = <my_ak_window>;
        bindings = <&macro_param_1to1>,
                <&kp MACRO_PLACEHOLDER>; \
    };


    blt: blt {
        compatible = "zmk,behavior-hold-tap";
        label = "buffered_layer_tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <my_tapping_term>;
        bindings = <&mo>, <&bkp>;
    };


    toggle_hdvv_aptmak: toggle_hdvv_aptmak {
        compatible = "zmk,behavior-tap-dance";
        label = "toggle_hdvv_aptmak";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&none>, <&to l_alpha>, <&to APTmak>;
    };

    skapp: sticky_key_app_switcher {
        compatible = "zmk,behavior-sticky-key";
        label = "SK_APP_SWITCHER";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <900>;
    };
    mm_bspc_del: mm_backspace_delete {
        compatible = "zmk,behavior-mod-morph";
        label = "MM_BACKSPACE_DELETE";
        #binding-cells = <0>;
        bindings = <&lt l_fn BACKSPACE>, <&bkp DELETE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    hm: homerow_mods { // use on either hand
        compatible = "zmk,behavior-hold-tap";
        label = "homerow_mods";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&bkp>;
    };
    hmr: homerow_mods_right { // use on right hand to mod left
        compatible = "zmk,behavior-hold-tap";
        label = "homerow_mods_right";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&bkp>;
        hold-trigger-key-positions = <KEYS_L THUMBS>; // left hand allowed
    };
    hml: homerow_mods_left { // use on left hand to mod right
        compatible = "zmk,behavior-hold-tap";
        label = "homerow_mods_left";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&bkp>;
        hold-trigger-key-positions = <KEYS_R THUMBS>; // right hand allowed
    };
    hrm_t: hrm_t {
        compatible = "zmk,behavior-hold-tap";
        label = "hrm_t";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&ak_t>;
        hold-trigger-key-positions = <KEYS_R THUMBS>; // right hand allowed
    };
    hrm_a: hrm_a {
        compatible = "zmk,behavior-hold-tap";
        label = "hrm_a";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&ak_a>;
        hold-trigger-key-positions = <KEYS_L THUMBS>; // left hand allowed
    };
    hrm_e: hrm_e {
        compatible = "zmk,behavior-hold-tap";
        label = "hrm_e";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&ak_e>;
        hold-trigger-key-positions = <KEYS_L THUMBS>; // left hand allowed
    };
    hrm_i: hrm_i {
        compatible = "zmk,behavior-hold-tap";
        label = "hrm_i";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        quick-tap-ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&ak_i>;
        hold-trigger-key-positions = <KEYS_L THUMBS>; // left hand allowed
    };

    lk: lk {
        compatible = "zmk,behavior-hold-tap";
        label = "lk";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&bkp>, <&bkp>;
    };
    lk_qu: lk_qu {
        compatible = "zmk,behavior-hold-tap";
        label = "lk_qu";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&bkp>, <&Qu>;
    };

    lk_E_accent: lk_E_accent { // ¬¥, √© on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_E_accent";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&typeEaccent>, <&kp>;
    };
    lk_E_grave: lk_E_grave { // `, √® on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_E_grave";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&typeEgrave>, <&kp>;
    };
    lk_E_acute: lk_E_acute { // ÀÜ, √™ on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_E_acute";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&typeEacute>, <&kp>;
    };
    lk_O_macron: lk_O_macron { // ¬Ø, ≈ç on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_O_macron";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&typeOmacron>, <&kp>;
    };
    lk_A_ring: lk_A_ring { // Àö, √• on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_A_ring";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&typeAring>, <&kp>;
    };
    lk_U_umlaut: lk_U_umlaut { // ¬®, √º on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_U_umlaut";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&typeUumlaut>, <&kp>;
    };
    lk_C_cedille: lk_C_cedille { // ¬∏, √ß on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_C_cedille";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&typeCedille>, <&kp>;
    };


    lk_Japan: lk_Japan { // Japan on tap, Japanese on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_Japan";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&typeJapanese>, <&typeJapan>;
    };
    lk_th: lk_th { // Th on tap, tion on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_th";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        quick-tap-ms = <90>;
//            global-quick-tap;
        flavor = "tap-preferred";
        bindings = <&tion>, <&Th>;
    };
    lk_sh: lk_sh { // Sh on tap, sion on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_sh";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        quick-tap-ms = <90>;
//            global-quick-tap;
        flavor = "tap-preferred";
        bindings = <&sion>, <&Sh>;
    };
    lk_gh: lk_gh { // Gh on tap, Ght on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_gh";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        quick-tap-ms = <90>;
//            global-quick-tap;
        flavor = "tap-preferred";
        bindings = <&ght>, <&Gh>;
    };
    lk_quote: lk_quote { // " on tap, ‚Äú‚Äù on "linger" (curly quotes)
        compatible = "zmk,behavior-hold-tap";
        label = "lk_quote";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&pairDquo>, <&kp>;
    };
    lk_par: lk_par { // ( on tap, () on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_par";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&pairPar>, <&bkp>;
    };
    lk_bkt: lk_bkt { // [ on tap, [] on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_bkt";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&pairBkt>, <&bkp>;
    };
    lk_brc: lk_brc { // { on tap, {} on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_brc";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&pairBrc>, <&bkp>;
    };
    lk_ltgt: lk_ltgt { // < on tap, <|> on "linger"
        compatible = "zmk,behavior-hold-tap";
        label = "lk_ltgt";
        #binding-cells = <2>;
        tapping-term-ms = <my_tapping_term>;
        flavor = "tap-preferred";
        bindings = <&pairLtGt>, <&bkp>;
    };

    CmmaSemi: CmmaSemi {
        compatible = "zmk,behavior-mod-morph";
        label = "comma_semi";
        #binding-cells = <0>;
        bindings = <&bkp CMMA>, <&typeSemi>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    DotColn: DotColn {
        compatible = "zmk,behavior-mod-morph";
        label = "DotColn";
        #binding-cells = <0>;
        bindings = <&dot_ak>, <&bkp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    SlshStar: SlshStar {
        compatible = "zmk,behavior-mod-morph";
        label = "SlshStar";
        #binding-cells = <0>;
        bindings = <&bkp FSLH>, <&bkp STAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    HashDllr: HashDllr {
        compatible = "zmk,behavior-mod-morph";
        label = "HashDllr";
        #binding-cells = <0>;
        bindings = <&bkp HASH>, <&bkp DLLR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    MinusPlus: MinusPlus {
        compatible = "zmk,behavior-mod-morph";
        label = "MinusPlus";
        #binding-cells = <0>;
        bindings = <&bkp MINUS>, <&bkp PLUS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    DqtLbkt: DqtLbkt {
        compatible = "zmk,behavior-mod-morph";
        label = "DqtLbkt";
        #binding-cells = <0>;
        bindings = <&bkp DQT>, <&bkp LBKT>;
        mods = <(MOD_LALT|MOD_RALT)>;
    };
    DqtRbkt: DqtRbkt {
        compatible = "zmk,behavior-mod-morph";
        label = "DqtRbkt";
        #binding-cells = <0>;
        bindings = <&bkp DQT>, <&bkp RBKT>;
        mods = <(MOD_LALT|MOD_RALT)>;
    };
    SqtLbkt: SqtLbkt {
        compatible = "zmk,behavior-mod-morph";
        label = "SqtLbkt";
        #binding-cells = <0>;
        bindings = <&bkp SQT>, <&bkp LBKT>;
        mods = <(MOD_LALT|MOD_RALT)>;
    };
    SqtRbkt: SqtRbkt {
        compatible = "zmk,behavior-mod-morph";
        label = "SqtRbkt";
        #binding-cells = <0>;
        bindings = <&bkp SQT>, <&bkp RBKT>;
        mods = <(MOD_LALT|MOD_RALT)>;
    };
    BspcDel: Bspc_Del {
        compatible = "zmk,behavior-mod-morph";
        label = "Bspc_Del";
        #binding-cells = <0>;
        bindings = <&bkp BSPC>, <&bkp DEL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
};
