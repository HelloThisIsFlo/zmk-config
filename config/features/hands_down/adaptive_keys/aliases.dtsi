/****************************************************/
/****               Adaptive Keys                ****/
/****************************************************/
#define ak_A &ak l_akA A
#define ak_B &ak l_akB B
#define ak_C &ak l_akC C
#define ak_D &ak l_akD D
#define ak_E &ak l_akE E
#define ak_F &ak l_akF F
#define ak_G &ak l_akG G
#define ak_H &ak l_akH H
#define ak_hE &ak l_akhE E
// I could create a ak_hO, for "hoi" => "hoo" ... but that would take one layer for a niche use-case => Only do if I have extra layers I don't need after setting everything.
#define ak_I &ak l_akI I
#define ak_J &ak l_akJ J
#define ak_K &ak l_akK K
#define ak_L &ak l_akL L
#define ak_M &ak l_akM M
#define ak_N &ak l_akN N
#define ak_O &ak l_akO O
#define ak_P &ak l_akP P
#define ak_Q &ak l_akQ Q
#define ak_R &ak l_akR R
#define ak_S &ak l_akS S
#define ak_T &ak l_akT T
#define ak_U &ak l_akU U
#define ak_V &ak l_akV V
#define ak_W &ak l_akW W
#define ak_X &ak l_akX X
#define ak_Y &ak l_akY Y
#define ak_Z &ak l_akZ Z


// For these keys, I could use '________' (&trans) instead of the ak_X macros, but the ak_X macros make the ak key visible on the keymap-drawer, so I went with the ak_X macros.
#define ___A____ ak_A
#define ___B____ ak_B
#define ___C____ ak_C
#define ___D____ ak_D
#define ___E____ ak_E
#define ___F____ ak_F
#define ___G____ ak_G
#define ___H____ ak_H
#define ___I____ ak_I
#define ___J____ ak_J
#define ___K____ ak_K
#define ___L____ ak_L
#define ___M____ ak_M
#define ___N____ ak_N
#define ___O____ ak_O
#define ___P____ ak_P
#define ___Q____ ak_Q
#define ___R____ ak_R
#define ___S____ ak_S
#define ___T____ ak_T
#define ___U____ ak_U
#define ___V____ ak_V
#define ___W____ ak_W
#define ___X____ ak_X
#define ___Y____ ak_Y
#define ___Z____ ak_Z
#define __hE____ ak_hE


#define CB_to_SB    &replace_char_with_bigram_SB /* Symetry on BS(c) ✔ */
#define CM_to_NM    &replace_char_with_bigram_NM /* Symetry on MN(c) ✔ */
#define CP_to_TP    &replace_char_with_bigram_TP /* Symetry on PT(c) ✔ */
#define DB_to_LB    &replace_char_with_bigram_LB /* Symetry on BL(d) ✔ */
#define DK_to_LK    &replace_char_with_bigram_LK /* Symetry on KL(d) ✔ */
#define DV_to_LV    &replace_char_with_bigram_LV /* Symetry on VL(d) ✔ <- Not really needed, but kept for consistency */
#define FP_to_SP    &replace_char_with_bigram_SP /* Symetry on PS(f) ✔ */
#define GK_to_LK    &replace_char_with_bigram_LK /* Symetry on KL(g) ✔ */
#define GP_to_LP    &replace_char_with_bigram_LP /* Symetry on PL(g) ✔ */
#define JG_to_DG    &replace_char_with_bigram_DG /* Symetry on GD(j) ✔ */
#define KM_to_BM    &replace_char_with_bigram_BM /* Symetry on MB(k) ✔ */
#define MG_to_LG    &replace_char_with_bigram_LG /* Symetry on GL(m) ✔ */
#define PB_to_NB    &replace_char_with_bigram_NB /* NO Symetry, but that's ok */
#define PB_to_SB    &replace_char_with_bigram_SB /* Symetry on BS(p) ✔ */
#define PN_to_LN    &replace_char_with_bigram_LN /* Symetry on NL(p) ✔ */
#define TJ_to_NJ    &replace_char_with_bigram_NJ /* Symetry on JN(t) ✔ <- Not really needed, but kept for consistency */
#define TK_to_NK    &replace_char_with_bigram_NK /* Symetry on KN(t) ✔ */
#define TV_to_NV    &replace_char_with_bigram_NV /* Symetry on VN(t) ✔ <- Not really needed, but kept for consistency */
#define WM_to_LM    &replace_char_with_bigram_LM /* NO Symetry, but that's ok */
#define WM_to_PM    &replace_char_with_bigram_PM /* Symetry on MP(w) ✔ */
#define XM_to_BM    &replace_char_with_bigram_BM /* Symetry on MB(x) ✔ */
#define YB_to_BB    &replace_char_with_bigram_BB /* NO Symetry, but that's ok */
#define YF_to_IF    &replace_char_with_bigram_IF /* Symetry on FI(y) ✔ */
