ZMK_MACRO(Qu,
        wait-ms = <10>;
        tap-ms = <TEMP_macro_tap_time>;
        bindings = <&macro_tap &kp Q>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp U>
                ;
)

// Can't be a TYPING_MACRO because it needs a custom 'wait-ms' (otherwise LogSeq doesn't start auto-complete)
ZMK_MACRO(logseqPageRef,
        wait-ms = <100>;
        tap-ms = <TEMP_macro_tap_time>;
        bindings = 
        <&kp LEFT_BRACKET>,
        <&kp LEFT_BRACKET>;
)


TYPING_MACRO(arrowLeftSingle,  &kp SPACE &kp LESS_THAN &kp MINUS &kp SPACE)
TYPING_MACRO(arrowRightSingle, &kp SPACE &kp MINUS &kp GREATER_THAN &kp SPACE)
TYPING_MACRO(arrowLeftDouble,  &kp SPACE &kp LESS_THAN &kp EQUAL &kp SPACE)
TYPING_MACRO(arrowRightDouble, &kp SPACE &kp EQUAL &kp GREATER_THAN &kp SPACE)

TYPING_MACRO(closeTab, &kp LG(W))
TYPING_MACRO(quitApp,  &kp LG(Q))
TYPING_MACRO(closeTabLinWin, &kp LC(W))
TYPING_MACRO(quitAppLinWin,  &kp LC(Q))

TYPING_MACRO(previous,  &kp LG(LEFT_BRACKET))
TYPING_MACRO(next,      &kp LG(RIGHT_BRACKET))
// These two are set as an alias instead of a macro, so it can be held for key-repeat
#define rightWord &kp LA(RIGHT)
#define leftWord &kp LA(LEFT)
TYPING_MACRO(startLine, &kp LC(A))
TYPING_MACRO(endLine,   &kp LC(E))

TYPING_MACRO(switchSpaceL, &kp LC(LEFT))
TYPING_MACRO(switchSpaceR, &kp LC(RIGHT))
TYPING_MACRO(showSpaces,   &kp LC(UP))
TYPING_MACRO(switchSpaceLinwinL, &kp LG(LC(LEFT)))
TYPING_MACRO(switchSpaceLinwinR, &kp LG(LC(RIGHT)))
TYPING_MACRO(showSpacesLinwin,   &kp LG(LC(UP)))

TYPING_MACRO(switchSpaceR_toLinwin,  &kp LC(RIGHT) &to l_alpha_linwin)
TYPING_MACRO(switchSpaceL_toBase,    &kp LC(LEFT)  &to l_alpha)
// TYPING_MACRO(switchSpaceR_toLinwin,      &kp LC(RIGHT))
// TYPING_MACRO(switchSpaceLinwinL_toBase,  &kp LG(LC(LEFT)))


TYPING_MACRO(previousLinwin,  &kp LC(LEFT_BRACKET))
TYPING_MACRO(nextLinwin,      &kp LC(RIGHT_BRACKET))
#define rightWordLinwin &kp LC(RIGHT)
#define leftWordLinwin &kp LC(LEFT)
TYPING_MACRO(startLineLinwin, &kp HOME)
TYPING_MACRO(endLineLinwin,   &kp END)